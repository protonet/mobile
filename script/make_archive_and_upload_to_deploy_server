#!/bin/bash

# check dependancies
function has {
  type "$1" >/dev/null 2>&1
}

if ! has curl; then
  echo "Please install curl and re-run this script."
  exit 1
fi


export HOST=protonet-live
export APP_ARCHIVE=dashboard.tar.gz
export BABUSHKA_BASE_ARCHIVE=babushka_base.tar.gz
export BABUSHKA_ARCHIVE=babushka.tar.gz
export BABUSHKA_DEPS_ARCHIVE=babushka_deps.tar.gz
export DEPLOYER_ARCHIVE=deployer.tar.gz
export PROJECT_DIR=`pwd`
export UPLOAD_PATH="~/code-dispatcher/code_dispatcher"

# for os x tells tar not to include resource forks
export COPYFILE_DISABLE=true

#  is this a beta or a stable release?
select release_type in UNSTABLE STABLE "OVERWRITE LAST"
do 
  break;
done

#  prepare the basics

# check wether current master is up to date
git ls-remote origin -h refs/heads/master | grep `git rev-parse HEAD`
if [ $? != 0 ]; then
  echo "Your master is not up to date, you cannot create a release package."
  exit 1
fi

#  generate a new version
export last_version=`curl http://releases.protonet.info/beta/version`

if [ "$release_type" != "OVERWRITE LAST" ]; then
   let "last_version += 1"
fi
############################################################
#  get the dashboard
cd /tmp
rm -rf dashboard
git clone $PROJECT_DIR dashboard
cp $PROJECT_DIR/.rvmrc dashboard
cd dashboard
git checkout master
git reset --hard
git clean -f
git config remote.origin.url=git@github.com:protonet/dashboard.git
git pull
git submodule init
git submodule update
bundle package
export DASHBOARD_REVISION=`git log --pretty=format:"%H" -n 1`

#  write version information
if [ "$release_type" != "OVERWRITE LAST" ]; then
  echo $release_type > TYPE
else
  scp protonet-live:$UPLOAD_PATH/releases/$last_version/TYPE /tmp/dashboard/TYPE
fi
echo $last_version > RELEASE

# set release_versions in bootstrap script
# this if handles os x and ubuntu systems, it's not DRYed yet but works
if [[ $OSTYPE == darwin* ]]; then
  cat script/ptn_bootstrap_start    | sed -i '' -e "s/RELEASE_VERSION=\"\"/RELEASE_VERSION=\"$last_version\"/g" script/ptn_bootstrap_start
  cat script/ptn_bootstrap_continue | sed -i '' -e "s/RELEASE_VERSION=\"\"/RELEASE_VERSION=\"$last_version\"/g" script/ptn_bootstrap_continue
  cat script/ptn_bootstrap_babushka | sed -i '' -e "s/RELEASE_VERSION=\"\"/RELEASE_VERSION=\"$last_version\"/g" script/ptn_bootstrap_babushka
else
  cat script/ptn_bootstrap_start    | sed -i'' -e "s/RELEASE_VERSION=\"\"/RELEASE_VERSION=\"$last_version\"/g" script/ptn_bootstrap_start
  cat script/ptn_bootstrap_continue | sed -i'' -e "s/RELEASE_VERSION=\"\"/RELEASE_VERSION=\"$last_version\"/g" script/ptn_bootstrap_continue
  cat script/ptn_bootstrap_babushka | sed -i'' -e "s/RELEASE_VERSION=\"\"/RELEASE_VERSION=\"$last_version\"/g" script/ptn_bootstrap_babushka
fi


# now create an archive
cd /tmp
tar -pczf $APP_ARCHIVE --exclude .git dashboard/

############################################################
# get protonet@babushka
cd /tmp
rm -rf babushka-base
git clone git@github.com:protonet/babushka.git babushka-base
cd babushka-base
export BABUSHKA_BASE_REVISION=`git log --pretty=format:"%H" -n 1`

#  now create another archive
cd /tmp
tar -pczf $BABUSHKA_BASE_ARCHIVE --exclude .git babushka-base/

############################################################
# get protonet@babushka-deps
cd /tmp
rm -rf babushka
git clone git@github.com:protonet/babushka-deps.git babushka
cd babushka
export BABUSHKA_REVISION=`git log --pretty=format:"%H" -n 1`

#  now create another archive
cd /tmp
tar -pczf $BABUSHKA_ARCHIVE --exclude .git babushka/

############################################################
#  get the dudemeister@babushka-deps
cd /tmp
rm -rf babushka-deps
git clone git@github.com:dudemeister/babushka-deps.git babushka-deps
cd babushka-deps
export BABUSHKA_DEPS_REVISION=`git log --pretty=format:"%H" -n 1`

#  now create the dudemeister@babushka-deps archive
cd /tmp
tar -pczf $BABUSHKA_DEPS_ARCHIVE --exclude .git babushka-deps/

############################################################
#  get the deployer
cd /tmp
rm -rf deployer
git clone git@github.com:protonet/deploy.git deployer
cd deployer
git reset --hard c0ed1673b35f1305cc4b71e17c6cbabcac8dea60
export DEPLOYER_REVISION=`git log --pretty=format:"%H" -n 1`
rm Gemfile.lock

#  now create the deployer archive
cd /tmp
tar -pczf $DEPLOYER_ARCHIVE --exclude .git deployer/

############################################################
# create directory for the new release and upload it
ssh protonet-live "mkdir -p $UPLOAD_PATH/releases/$last_version"
scp $APP_ARCHIVE $BABUSHKA_BASE_ARCHIVE $BABUSHKA_ARCHIVE $DEPLOYER_ARCHIVE $BABUSHKA_DEPS_ARCHIVE protonet-live:$UPLOAD_PATH/releases/$last_version
scp /tmp/dashboard/script/ptn_bootstrap* protonet-live:$UPLOAD_PATH/releases/$last_version
if [ "$release_type" != "OVERWRITE LAST" ]; then
   scp /tmp/dashboard/TYPE protonet-live:$UPLOAD_PATH/releases/$last_version
fi

# if this is a stable release then link that thing to stable
if [ "$release_type" = "STABLE" ]; then
   ssh protonet-live "rm -f $UPLOAD_PATH/stable; ln -s $UPLOAD_PATH/releases/$last_version $UPLOAD_PATH/stable"
fi

# and create tags so we know what we used
cd /tmp/dashboard
git config remote.origin.url=git@github.com:protonet/dashboard.git
if [ "$release_type" = "OVERWRITE LAST" ]; then
  git tag -d R_$last_version
  git push origin :refs/tags/R_$last_version
fi
git tag -a R_$last_version $DASHBOARD_REVISION -m "RELEASE $last_version BY `whoami` ON `date`"
git push --tags

cd /tmp/babushka-base
if [ "$release_type" = "OVERWRITE LAST" ]; then
  git tag -d R_$last_version
  git push origin :refs/tags/R_$last_version
fi
git tag -a R_$last_version $BABUSHKA_BASE_REVISION -m "RELEASE $last_version BY `whoami` ON `date`"
git push --tags

cd /tmp/babushka
if [ "$release_type" = "OVERWRITE LAST" ]; then
  git tag -d R_$last_version
  git push origin :refs/tags/R_$last_version
fi
git tag -a R_$last_version $BABUSHKA_REVISION -m "RELEASE $last_version BY `whoami` ON `date`"
git push --tags

cd /tmp/babushka-deps
if [ "$release_type" = "OVERWRITE LAST" ]; then
  git tag -d R_$last_version
  git push origin :refs/tags/R_$last_version
fi
git tag -a R_$last_version $BABUSHKA_DEPS_REVISION -m "RELEASE $last_version BY `whoami` ON `date`"
git push --tags

cd /tmp/deployer
if [ "$release_type" = "OVERWRITE LAST" ]; then
  git tag -d R_$last_version
  git push origin :refs/tags/R_$last_version
fi
git tag -a R_$last_version $DEPLOYER_REVISION -m "RELEASE $last_version BY `whoami` ON `date`"
git push --tags

# cleanup
rm -rf /tmp/dashboard
rm -rf /tmp/babushka-base
rm -rf /tmp/babushka
rm -rf /tmp/babushka-deps
rm -rf /tmp/deployer

# and cleanup archives too
rm /tmp/$APP_ARCHIVE
rm /tmp/$BABUSHKA_BASE_ARCHIVE
rm /tmp/$BABUSHKA_ARCHIVE
rm /tmp/$DEPLOYER_ARCHIVE
rm /tmp/$BABUSHKA_DEPS_ARCHIVE
