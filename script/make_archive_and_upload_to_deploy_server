#!/bin/bash

export HOST=protonet-live
export APP_ARCHIVE=dashboard.tar.gz
export BABUSHKA_ARCHIVE=babushka.tar.gz
export BABUSHKA_DEPS_ARCHIVE=babushka_deps.tar.gz
export DEPLOYER_ARCHIVE=deployer.tar.gz
export PROJECT_DIR=`pwd`
export UPLOAD_PATH="~/code-dispatcher/code_dispatcher"

# for os x tells tar not to include resource forks
export COPYFILE_DISABLE=true

#  is this a beta or a stable release?
select release_type in UNSTABLE STABLE "OVERWRITE LAST"
do 
  break;
done

#  prepare the basics

#  generate a new version
export last_version=`curl http://releases.protonet.info/beta/version`

if [ "$release_type" != "OVERWRITE LAST" ]; then
   let "last_version += 1"
fi

############################################################
#  get the dashboard
cd /tmp
rm -rf dashboard
git clone $PROJECT_DIR dashboard
cp $PROJECT_DIR/.rvmrc dashboard
cd dashboard
git checkout master
git reset --hard
git clean -f
git pull
git submodule init
git submodule update
bundle package
rm -rf .git

#  write version information
echo $release_type > TYPE
echo $last_version > RELEASE

#  now create an archive
cd /tmp
tar -pczf $APP_ARCHIVE dashboard/

############################################################
# get babushka
cd /tmp
rm -rf babushka
git clone git@github.com:protonet/babushka.git
rm -rf babushka/.git

#  now create another archive
cd /tmp
tar -pczf $BABUSHKA_ARCHIVE babushka/

############################################################
#  get the dudemeister@babushka-deps
cd /tmp
rm -rf babushka-deps
git clone git@github.com:dudemeister/babushka-deps.git babushka-deps
rm -rf babushka-deps/.git

#  now create the dudemeister@babushka-deps archive
cd /tmp
tar -pczf $BABUSHKA_DEPS_ARCHIVE babushka-deps/

############################################################
#  get the deployer
cd /tmp
rm -rf deployer
git clone git@github.com:protonet/deploy.git deployer
cd deployer
git reset --hard d0f693c602924ebff0ef2250e90aa36e4c2a54e2
cd /tmp
rm -rf deployer/.git
rm -rf deployer/Gemfile.lock

#  now create the deployer archive
cd /tmp
tar -pczf $DEPLOYER_ARCHIVE deployer/

############################################################
# create directory for the new release and upload it
ssh protonet-live "mkdir -p $UPLOAD_PATH/releases/$last_version"
scp $APP_ARCHIVE $BABUSHKA_ARCHIVE $DEPLOYER_ARCHIVE $BABUSHKA_DEPS_ARCHIVE protonet-live:$UPLOAD_PATH/releases/$last_version
scp /tmp/dashboard/script/ptn_bootstrap* protonet-live:$UPLOAD_PATH/releases/$last_version
if [ "$release_type" != "OVERWRITE LAST" ]; then
   scp /tmp/dashboard/TYPE protonet-live:$UPLOAD_PATH/releases/$last_version
fi

# if this is a stable release then link that thing to stable
if [ "$release_type" = "STABLE" ]; then
   ssh protonet-live "rm -f $UPLOAD_PATH/stable; ln -s $UPLOAD_PATH/releases/$last_version $UPLOAD_PATH/stable"
fi

# cleanup
rm /tmp/$APP_ARCHIVE
rm /tmp/$BABUSHKA_ARCHIVE
rm /tmp/$DEPLOYER_ARCHIVE
rm /tmp/$BABUSHKA_DEPS_ARCHIVE
