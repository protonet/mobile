#!/usr/bin/env ruby
require 'optparse'

local_path                = File.dirname(__FILE__)
rails_root                = local_path + "/../"
tmp_path                  = rails_root + "/tmp/"
rabbitmq_path             = rails_root    + "messaging/rabbitmq/"
rabbitmq_server_location  = rabbitmq_path + "scripts/rabbitmq-server"
pids_file                 = tmp_path + "servers.pids"


options = {}

info = <<-EOS
===============================================================================
RabbitMQ server (or symbolic link to it) not found in APP/messaging/rabbitmq.
Use "ln -s /YOUR_RABBIT_MQ_INSTALLATION/rabbitmq-server rabbitmq" to create it.
===============================================================================
EOS
puts info and exit unless File.exists?(rabbitmq_server_location)

def exit_all_running_servers(pids_file)
  if File.exists?(pids_file) && !File.zero?(pids_file)
    puts "Trying to shutdown services..."
    process_counter = 0
    File.open(pids_file, 'r+') do |f|
      f.readlines.each do |pid|
        process_counter =+ 1
        Process.kill("TERM", pid.to_i)
        sleep 0.5
        (Process.kill(0, pid.to_i) rescue process_counter =- 1)
      end
    end
    if process_counter <= 0 && File.delete(pids_file)
      puts 'All servers have been shut down.'
    else
      puts 'Servers could not be shut down.'
    end
  end
end

def system_with_pid(*cmd) 
  pid = fork do 
    exec(*cmd) 
    exit! 127 
  end 
  yield pid if block_given? 
end

def write_pid(file, pid)
  File.open(file, 'a') do |f|
    f.puts(pid)
  end
end




ARGV.options do |opts|
  script_name = File.basename($0)
  opts.banner = "Usage: servers [options]"

  opts.separator ""

  opts.on('--start',  'start all messaging servers')    { |v| options[:action] = 'start' }
  opts.on('--stop',   'stop  all messaging servers')    { |v| options[:action] = 'stop' }
  opts.on('--status', 'show messaging server statuses') { |v| options[:action] = 'status'}

  opts.separator ""

  opts.on("-h", "--help", "Show this help message.") { puts opts; exit }

  opts.parse!
end

if options[:action] == 'start'
  start_commands = []
  start_commands << "#{rails_root}/event_machine/js_dispatching_server.rb"
  start_commands << <<-EOS 
RABBITMQ_NODE_IP_ADDRESS="" RABBITMQ_NODE_PORT="" RABBITMQ_LOG_BASE="/tmp" RABBITMQ_MNESIA_DIR="/tmp/rabbitmq-rabbit-mnesia" RABBITMQ_NODE_ONLY=true RABBITMQ_SERVER_START_ARGS=" -s rabbit" #{rabbitmq_server_location}
EOS

  puts start_commands.inspect, options[:action]

  start_commands.each do |c|
    system_with_pid(c) do |pid| 
      write_pid(pids_file, pid)
    end
  end

end

if options[:action] == 'stop'
  exit_all_running_servers(pids_file)
end

if options[:action].nil?
  puts 'nothing happened. use servers -h for help.'
end
