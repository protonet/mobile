#!/bin/bash

# the following is highly inspired and partly copied by what benhoskings is doing with his babushka bootstrapping script

function welcome {
  echo ""
  echo "Good morning 'nam!"
  echo ""
  echo "This is your protonet bootstrapping script speaking, if all goes well today"
  echo "we should have your node up and running in no time."
  echo ""
  echo "DISCLAIMER: this is intended to be run on Ubuntu 10.04LTS server releases "
  echo "so don't blame us if it doesn't work on something else."
  echo ""
  echo "Let's have a short overview of what we're going to do:"
  echo "- we start with creating the protonet user, the admin group which it will belong to"
  echo "- next up we'll get ruby and our basic building stuff"
  echo "- will then switch to the protonet user and install ourselves a babushka"
  echo "- next up we'll be getting our babushka deps that will handle the rest of the installation"
  echo ""
  echo "If everything goes according to plan you'll end up with a perfectly setup protonet node."
  echo ""
  echo "So let's roll!"
  echo ""
  read -p "Ready? [y/N] " f
  [[ "$f" == y* ]] || [[ "$f" == Y* ]]
}

function user_basics {
  echo ""
  echo "Setting up user..."
  id -u protonet >/dev/null 2>&1

  if [ $? != 0 ]; then 
    #Make sure that we have a protonet user
    sudo useradd protonet -m -s /bin/bash
    #Make sure there is a protonet group
    sudo groupadd -f admin
    # add the current user to the admin group
    sudo usermod -a -G admin `whoami`
    # And add the protonet user to that group
    sudo usermod -a -G admin protonet
  fi
  echo "Done setting up user."
  echo ""
}

function update_apt {
  echo ""
  echo "Updating apt..."
  sudo apt-get -qqy update
  echo "Done updating apt."
  echo ""
}

function install_ruby {
  echo ""
  echo "Installing ruby..."
  sudo apt-get install -qqy build-essential
  sudo apt-get install -qqy ruby-full
  if [ $? != 0 ]; then
    sudo apt-get install -qqy ruby ruby1.8-dev rdoc ri libopenssl-ruby
    [[ $? == 0 ]]
  else
    true
  fi
  echo "Done installing ruby."
  echo ""
}


function get_babushka {
  bash -c "`wget -O - babushka.me/up`"
}

function foobar {
  sudo su -l protonet $(cd `dirname $0` && pwd)/ptn_bootstrap_2
}

from="http://babushka.me/tarballs/babushka.tgz"
to="$HOME/.babushka/bootstrap"

function true_with { echo -e "\n$1"; true; }
function false_with { echo -e "\n$1"; false; }

function has {
  type "$1" >/dev/null 2>&1
}

function pkg_manager {
  managers=(aptitude apt-get brew pacman yum)
  for manager in "${managers[@]}"; do
    has "$manager" && echo "$manager" && exit
  done
}

function update_manager {
  case $(pkg_manager) in
    apt-get) apt-get update -qqy ;;
    aptitude) aptitude -y update ;;
    brew) brew update ;;
    yum) true ;;
    *)
  esac
}

function logo {
  echo "    _   ,_    __ _|_  __   _  _    _ _|_ "
  echo "  |/ \_/  |  /  \_|  /  \_/ |/ |  |/  |  "
  echo "  |__/    |_/\__/ |_/\__/   |  |_/|__/|_/"
  echo " /|                                      "
  echo " \|                                      "
  echo ""
}

function check {
  if ! has 'curl' && ! has 'wget'; then
    false_with "Sorry, you need either curl or wget installed before I can download babushka."
  elif ! has 'ruby'; then
    if ! has $(pkg_manager); then
      false_with "Sorry, you don't have ruby installed, and I couldn't find\na package manager I recognise."
    elif [ $(whoami) != 'root' ] && [ $(pkg_manager) != 'brew' ]; then
      false_with "You don't have ruby installed. I can install it via $(pkg_manager),\nbut only when running as root."
    else
      true
    fi
  else
    true
  fi
}


function install_ruby_if_required {
  if has 'ruby'; then
    true # already installed
  else
    echo "First we need to install ruby (via $(pkg_manager))."
    update_manager
    install_ruby
    if ! has 'ruby'; then
      false_with "Argh, the ruby install failed."
    else
      true_with "Nice, ruby $(ruby --version | awk '{print $2}') was installed at $(which ruby)."
    fi
  fi
}

function clean_up_install_dir {
  mkdir -p "$HOME/.babushka" &&
  cd "$HOME/.babushka" &&
  rm -rf "bootstrap"
  cd
}

function create_install_dir {
  clean_up_install_dir &&
  mkdir -p "$to" &&
  cd "$to"
}

function stream_tarball {
  if has 'curl'; then
    curl -L -\# "$from" | tar -zxf - --strip-components 1
  elif has 'wget'; then
    wget --progress=bar "$from" -O - | tar -zxf - --strip-components 1
  fi
}

function handle_install {
  echo ""
  ruby "$to/bin/babushka.rb" meet 'babushka' 
  [ $? -eq 0 ]
}

function on_install_success {
  clean_up_install_dir

  echo ""
  echo "All installed! If you're new, the basic idea is 'babushka <dep name>'."
  echo ""
  echo "Some examples you might like to try:"
  echo "  babushka babushka   # install/update babushka itself (i.e. what just happened)"
  echo "  babushka homebrew   # set up homebrew on your Mac"
  echo "  babushka rubygems   # up-to-date rubygems + latest sources"
  echo ""
  echo "You can instantly run others' public deps by adding a namespace. They're pulled"
  echo "from http://github.com/<name>/babushka-deps. Some examples:"
  echo "  babushka benhoskings:Sinatra.tmbundle   # also installs TextMate if required"
  echo "  babushka dgoodlad:coffeescript.src      # pulls in node.js if required, etc."
  echo ""
  echo "When you run deps from public sources like those, babushka anonymously posts"
  echo "success or failure to http://babushka.me, building a database anyone can search:"
  echo "  babushka search mongo   # shows mongo-related deps others have run"
  echo ""
  echo "The database is public and anonymous, and deps in local or private sources are"
  echo "never submitted. Info: http://benhoskin.gs/2010/09/24/babushka-community-stats/"
  echo ""
  echo "Resources:"
  echo "  babushka --help"
  echo "  @babushka_app"
  echo "  http://babushka.me/docs"
  echo "  http://babushka.me/mailing_list"
  true
}

function on_install_failure {
  echo ""
  echo "Something went wrong during the install."
  echo ""
  false
}

function do_bootstrap {
  install_ruby_if_required &&
  create_install_dir &&
  stream_tarball &&
  handle_install && on_install_success || on_install_failure
}


if welcome; then
  echo "Excellent."
  echo ""
  logo
  user_basics && 
  update_apt &&
  install_ruby &&
  get_babushka &&
  foobar || on_install_failure
  # do_bootstrap
else
  echo ""
  echo "OK, maybe another time. :)"
fi
