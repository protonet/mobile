#!/bin/bash

export CURRENT_PATH=$(cd `dirname $0` && cd ../.. && pwd)
export SHARED=$CURRENT_PATH/../../shared
export HOME=$CURRENT_PATH/../..

echo `date` >> $SHARED/log/publish_to_web.log
exec > $SHARED/log/publish_to_web.log 2>&1

. $HOME/../.bashrc
. $HOME/../.profile
cd $SHARED
export SHARED=`pwd`
export PIDFILE=$SHARED/pids/publish_to_web.pid
export PORT=$1
echo $PORT
shift 1
case $1 in
   start)
     if [ -f $PIDFILE ]; then
       if ( kill -0 `ps aux | grep -e "ssh localtunnel.*$PORT" | grep -v 'grep' | grep -v 'SCREEN' | awk '{ print $2 }'` 2> /dev/null ); then
         echo "The proxying is running."
         exit 0
       else
         rm -rf $PIDFILE
       fi
     fi
     screen -d -m /usr/bin/ssh localtunnel@directory.protonet.info -o ServerAliveInterval=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22666 -R $PORT:127.0.0.1:80 -i $SHARED/config/protonet.d/proxy_dsa -t
     echo `ps aux | grep -e "ssh localtunnel.*$PORT" | grep -v 'grep' | grep -v 'SCREEN' | awk '{ print $2 }'` > $PIDFILE
      ;;  
    stop)  
     kill -9 `ps aux | grep -e "SCREEN.*ssh localtunnel.*$PORT" | grep -v 'grep' | awk '{ print $2 }'`
     rm -rf $PIDFILE 
      ;;
    status)
      if ( kill -0 `ps aux | grep -e "ssh localtunnel.*" | grep -v 'grep' | grep -v 'SCREEN' | awk '{ print $2 }'` 2> /dev/null ); then
        echo "The proxying is running."
        exit 0
      else
        echo "The proxying is not running."
        exit 1
      fi
      ;;
    *)  
      echo "usage: publish_to_web rails-app-path remote_port {start|stop|status}" ;;
esac
exit 0
