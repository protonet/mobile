<%# TODO: this needs to be done smarter %>
<script type="protonet/template" id="meep-template">
  <%= render :partial => 'meeps/meep' %>
</script>
<script type="protonet/template" id="meep-to-merge-template">
  <%= render :partial => 'meeps/meep_to_merge' %>
</script>
<script type="protonet/template" id="text-extension-template">
  <%= render :partial => 'meeps/text_extension' %>
</script>
<script type="protonet/template" id="channel-reply-template">
  <%= render :partial => 'meeps/channel_reply' %>
</script>
<script type="protonet/template" id="user-reply-template">
  <%= render :partial => 'meeps/user_reply' %>
</script>
<script type="protonet/template" id="emoji-template">
  <%= render :partial => 'meeps/emoji' %>
</script>
<script type="protonet/template" id="reply-from-channel-template">
  <%= render :partial => 'meeps/reply_from_channel' %>
</script>
<script type="protonet/template" id="posted-in-channel-template">
  <%= render :partial => 'meeps/posted_in_channel' %>
</script>
<script type="protonet/template" id="meep-status-template">
  <%= render :partial => 'meeps/meep_status' %>
</script>
<script type="protonet/template" id="meep-actions-template">
  <%= render :partial => 'meeps/meep_actions' %>
</script>
<script type="protonet/template" id="admin-flag-template">
  <%= render :partial => 'users/admin_flag' %>
</script>
<script type="protonet/template" id="file-queue-template">
  <%= render :partial => 'files/queue' %>
</script>
<script type="protonet/template" id="file-queue-item-template">
  <%= render :partial => 'files/queue_item' %>
</script>
<style type="protonet/template" id="search-page-template">
  <section class="subpage search-page">
    <%= render :template => 'search/index' %>
    <%= sprockets_include_tag(:search) %>
  </section>
</style>

<%-
  users = SystemPreferences.show_only_online_users ? [] : User.registered.all
  channels = current_user.allowed_channels
  
  users.map!     {|u| User.prepare_for_frontend(u) }
  channels.map!  {|c| Channel.prepare_for_frontend(c, current_user, false) }
-%>
<script>
  var protonet = protonet || {};
  protonet.config = {
    controller_name:            "<%= controller_name %>",
    action_name:                "<%= action_name %>",
    base_url:                   location.protocol + "//" + location.host,
    node_base_url:              "<%= node_base_url %>",
    xhr_streaming_url:          "<%= xhr_streaming_url %>",
    dispatching_server:         "<%= server_name %>",
    dispatching_server_port:    "<%= configatron.socket.port %>",
    dispatching_websocket_port: "<%= configatron.websocket.port %>",
    dispatching_websocket_ssl_port: "<%= configatron.websocket_ssl.port %>",
    force_xhr_streaming:        <%= incoming_interface == "published_to_web" ? "true" : "false" %>,
    token:                      "<%= current_user.communication_token %>",
    default_avatar:             "<%= configatron.default_avatar %>",
    admin_ids:                  <%= User.admins.map(&:id).to_json %>,
    user_id:                    <%= current_user.id %>,
    user_name:                  <%= raw current_user.display_name.to_json %>,
    user_is_stranger:           <%= current_user.stranger?.to_json %>,
    show_search_widget:         <%= SystemPreferences.show_search_widget.to_json %>,
    show_clouds:                <%= SystemPreferences.show_clouds.to_json %>,
    show_only_online_users:     <%= SystemPreferences.show_only_online_users.to_json %>,
    allow_modal_views:          <%= SystemPreferences.allow_modal_views.to_json %>,
    authenticity_token:         "<%= form_authenticity_token %>",
    server:                     "<%= request.server_software %>",
    incoming_interface:         <%= raw incoming_interface.to_json %>,
    captive_redirect_url:       "<%= raw(params[:captive_redirect_url] || session[:captive_redirect_url]) %>",
    debug_mode:                 <%= (configatron.log_event_notifications.nil? ? false : configatron.log_event_notifications).to_json %>,
    channels:                   <%= raw channels.to_json %>,
    users:                      <%= raw users.to_json %>
  };
  
  <%= "var AIRBRAKE_API_KEY = '#{HoptoadNotifier.configuration.api_key}';" if Rails.env.production? %>
</script>

<%= sprockets_include_tag(:default) %>
<%= sprockets_include_tag(controller_name.to_sym) rescue nil %>
<%= raw("<script>#{SystemPreferences.custom_javascript}</script>") if SystemPreferences.custom_javascript %>
