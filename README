              .---. .---.                                     __                   __ 
             :     : o   :    I approve of: ____  _________  / /_____  ____  ___  / /_
         _..-:   o :     :-.._    /        / __ \/ ___/ __ \/ __/ __ \/ __ \/ _ \/ __/
     .-''  '  `---' `---' "   ``-.        / /_/ / /  / /_/ / /_/ /_/ / / / /  __/ /_  
   .'   "   '  "  .    "  . '  "  `.     / .___/_/   \____/\__/\____/_/ /_/\___/\__/  
  :   '.---.,,.,...,.,.,.,..---.  ' ;   /_/
  `. " `.                     .' " .'  
   `.  '`.                   .' ' .'   
    `.    `-._           _.-' "  .'  .----.
      `. "    '"--...--"'  . ' .'  .'  o   `.
      .'`-._'    " .     " _.-'`. :       o  :
jgs .'      ```--.....--'''    ' `:_ o       :
  .'    "     '         "     "   ; `.;";";";'
 ;         '       "       '     . ; .' ; ; ;
;     '         '       '   "    .'      .-'
'  "     "   '      "           "    _.-' 

= PROTONET

Core contributors: actionJackson (dreewill), comes (ppeszko), alto(alto), dudemeister (dudemeister), reza (fishman)
Contributors: christopher (tiff)

== DESCRIPTION:

First of all: all of the code and documentation is work in progress, and it's redistribution or redistribution of a modified version is currently not allowed without explicit permission of the project owner (dudemeister on github), the code and documentation *will* become open source at one point (basically when it works to some degree). I have still some work to do figuring out a good license for this thing.

I hope that you will contribute to this project and have fun using and writing it as I believe this to be our chance to (each one of us) truly revolutionize the way we communicate, interact and so much more!

Protonet aims to create a new internet (let's call it internet 2.0 ;)), basically it will become a giant (actually lots and lots of connected or not connected small) mesh network(s). Most of it's nodes will run an merb frontend, this is it - and it's called 'Dashboard'. It goes hand in hand with it's low-level part (also on github, called protonet-base).
Together (in the first phase of the project) they replicate paid access point functionality, e.g. before logging in all you http request are internally redirected to this dashboard, as the idea is to allow free use of node-owner internet functionality a simple no-hassle registration (no email or identification other than an user name and password are needed) leads to full access to the internet.

== TECHNOLOGIES:

Protonet-Dashboard runs on merb, datamapper, sqlite3 and jQuery as its JS framework.

== FEATURES:

Currently you can do the following things on it:

  * Create an user account
  * Login and -out with that account data
  * Chat in the so-called Lobby
  * enjoy the awesome design ;) (I can haz graphics?) ...
  * see who else is connected (mocked in dev)
  * see who has joined the lobby
  * upload and download files
  * create filelist with description and all
  * add files to filelists
  * see other connected users on the startpage

== NEXT THINGS PLANNED:

  * make it look better
    ** kick ass would be good
  * see which other users are spending time in the lobby (kinda works)
    ** replicate basic chat client functionality (e.g. tab completion on names and more)
  * be able to open new chat rooms
    ** make them private(hidden)/public
    ** adding/removing members to the private chats
  * initiate private chats
  * implement a way to notify node users when something new is on in the node and specifically in chats (e.g. you got a private message or similar things)
  * allow editing of your profile
    ** adding of a profile pic
    ** adding your twitter account
  * add possibility to create public/private lists (also in the works)
  
  * and ... need to do some more specs ;)

== MAKING IT RUN:

To run it you need to do following things (sudo if needed):

# gem install merb --include-dependencies

# gem sources -a http://gems.github.com

# gem install ParseTree

As of merb 1.0 adding the single gems is not necessary, it is a good idea to remove all your older merb and datamapper gems to avoid conflicts

Create the databases:
# rake db:create

Run the migrations:
# rake db:automigrate

Go to your dashboard directory and run merb, you should be able to point your browser to http://localhost:4000 and see the protonet dashboard.

== RUNNIN' THE TEST

Just as with your development environment you need to create and migrate the database:

# MERB_ENV=test rake db:create
# MERB_ENV=test rake db:automigrate

you can then call rake or rake spec in your project directory:

# rake
or
# rake spec

== COMPILING THE SOCKET:

How to compile a new version of the messaging actionscript:

Get the os x version of the compiler from http://www.mtasc.org/ :
http://www.mtasc.org/zip/mtasc-1.12-osx.zip (is the version we used for the current version)

let it compile the source:

~/Projekte/misc/mtasc-1.12-osx/mtasc -version 8 -header 100:100:100 -main -swf ~/Projekte/merb_data/dashboard/public/flash/socket.swf -v socket.as

== EXPERIMENTAL STUFF (not ready yet)

We are looking into using amqp and rabbitmq, for them to work you'll have to do a couple things:

first install a recent version of erlang:
sudo port install erlang

then get mercurial if you don't have it, either build it from source, use port or just get the binary:
sudo port install mercurial
or get the binaries at:
http://mercurial.berkwood.com/

If you don't have python installed:
sudo port install python26

If you do and have anything lower than python 26 you'll need to install the python simplejson lib:
http://pypi.python.org/pypi/simplejson

get the rabbitmq server and codegen:
hg clone http://hg.rabbitmq.com/rabbitmq-codegen
hg clone http://hg.rabbitmq.com/rabbitmq-server

now build it:
cd rabbitmq-server
make run

this should automatically start the rabbitmq server/broker.

if you have stopped it you can restart it by using:
RABBITMQ_NODE_IP_ADDRESS="" RABBITMQ_NODE_PORT="" RABBITMQ_LOG_BASE="/tmp" RABBITMQ_MNESIA_DIR="/tmp/rabbitmq-rabbit-mnesia" RABBITMQ_NODE_ONLY=true RABBITMQ_SERVER_START_ARGS=" -s rabbit" ./scripts/rabbitmq-server

now lets get the amqp gem... :
sudo gem install tmm1-amqp

now to get an idea of the things we can do now, have a look at this post:
http://hopper.squarespace.com/blog/2008/7/22/simple-amqp-library-for-ruby.html


== FLASH SOCKET COMMUNICATION CAVEATS

Awesome stuff is about to happen... since we are now using rabbitmq we need a way to send the correct policy to the requesting flash socket. this will be done by a very simple eventmachine server listening to the default policy communication port.