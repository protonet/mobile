              .---. .---.                                     __                   __ 
             :     : o   :    I approve of: ____  _________  / /_____  ____  ___  / /_
         _..-:   o :     :-.._    /        / __ \/ ___/ __ \/ __/ __ \/ __ \/ _ \/ __/
     .-''  '  `---' `---' "   ``-.        / /_/ / /  / /_/ / /_/ /_/ / / / /  __/ /_  
   .'   "   '  "  .    "  . '  "  `.     / .___/_/   \____/\__/\____/_/ /_/\___/\__/  
  :   '.---.,,.,...,.,.,.,..---.  ' ;   /_/
  `. " `.                     .' " .'  
   `.  '`.                   .' ' .'   
    `.    `-._           _.-' "  .'  .----.
      `. "    '"--...--"'  . ' .'  .'  o   `.
      .'`-._'    " .     " _.-'`. :       o  :
jgs .'      ```--.....--'''    ' `:_ o       :
  .'    "     '         "     "   ; `.;";";";'
 ;         '       "       '     . ; .' ; ; ;
;     '         '       '   "    .'      .-'
'  "     "   '      "           "    _.-' 

= PROTONET

Core Contributors: christopher (tiff), dudemeister (dudemeister), m0rk (m0rk), reza (fishman)
Past Contributors: actionJackson (dreewill), alto(alto), comes (ppeszko)

== DESCRIPTION:

First of all: all of the code and documentation is work in progress, and it's redistribution or redistribution of a modified version is currently not allowed without explicit permission of the project owner (dudemeister on github), the code and documentation *will* become open source at one point (basically when it works to some degree). I have still some work to do figuring out a good license for this thing.

I hope that you will contribute to this project and have fun using and writing it as I believe this to be our chance to (each one of us) truly revolutionize the way we communicate, interact and so much more!

Protonet aims to create a new internet (let's call it internet 2.0 ;)), basically it will become a giant (actually lots and lots of connected or not connected small) mesh network(s). Most of it's nodes will run an rails frontend, this is it - and it's called 'Dashboard'. This is also it's first awesome app.

It goes hand in hand with it's low-level part (also on github, called protonet-node-setup).
 

== TECHNOLOGIES:

Protonet-Dashboard runs on rails, sqlite3, rabbitmq, eventmachine (+amqp) and uses jQuery as its JS framework.

== FEATURES AND TODOs:

REVISION ONE! Featureset:

- dashboard:
  - you can see one or more channels and get 



== INSTALL
git submodule init
git submodule update

install the needed gems:

gem sources -a http://gems.github.com
sudo gem install jeremymcanally-context faker random_data mocha configatron sprockets ruby-debug eventmachine tmm1-amqp json sqlite3-ruby daemons ruby-net-ldap rmagick passenger rack capistrano capistrano-ext ruby-net-ldap --no-rdoc --no-ri

setup apache for local development:
sudo passenger-install-apache2-module
sudo mate /etc/apache2/httpd.conf
sudo mate /etc/apache2/other/protonet.conf
sudo apachectl graceful
mate /etc/hosts
tail -f log/development
touch tmp/restart.txt


# /etc/apache2/httpd.conf
LoadModule passenger_module /Library/Ruby/Gems/1.8/gems/passenger-2.2.5/ext/apache2/mod_passenger.so
   PassengerRoot /Library/Ruby/Gems/1.8/gems/passenger-2.2.5
   PassengerRuby /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby

# /etc/apache2/other/protonet.conf
NameVirtualHost *:80

<VirtualHost *:80>
  ServerName protonet.local
  DocumentRoot "/Users/jelveh/Projekte/protonet-dashboard/public"
  RailsEnv development
  RailsAllowModRewrite off
  <directory "/Users/jelveh/Projekte/protonet-dashboard/public">
    Order allow,deny
    Allow from all
  </directory>
</VirtualHost>


# /etc/hosts

127.0.0.1 protonet.local

ATTN: change your apache user to the same user passenger is running in - FIXME!

http://railscasts.com/episodes/122-passenger-in-development

ATTENTION: you might need to install some other dependecies.

== MESSAGING

Install our messaging broker:

sudo port selfupdate
sudo port install rabbitmq-server

if you have stopped it you can restart it by using:
RABBITMQ_NODE_IP_ADDRESS="" RABBITMQ_NODE_PORT="" RABBITMQ_LOG_BASE="/tmp" RABBITMQ_MNESIA_DIR="/tmp/rabbitmq-rabbit-mnesia" RABBITMQ_NODE_ONLY=true RABBITMQ_SERVER_START_ARGS=" -s rabbit" ./messaging/rabbitmq/scripts/rabbitmq-server

now to get an idea of the things we can do now, have a look at this post:
http://hopper.squarespace.com/blog/2008/7/22/simple-amqp-library-for-ruby.html

=== COMPILING THE SOCKET:

TextMate -> Bundles -> ActionScript -> MTASC -> Build with MTASC

=== FLASH SOCKET COMMUNICATION CAVEATS

Awesome stuff is about to happen... since we are now using rabbitmq we need a way to send the correct policy to the requesting flash socket. this will be done by a very simple eventmachine server listening to the default policy communication port.

Starting the js dispatching server:
messaging/event_machine/js_dispatching_server.rb

== LDAP (ON LEOPARD)

OpenLDAP is installed by default on Leopard (and earlier versions of OS X). In order to get it into a useful state, however, you will need to make a few changes:

Locate the OpenLDAP configuration files in /etc/openldap/

cp slapd.conf.default slapd.conf

Then edit your slapd.conf and change this entry:

rootpw          secret

to

rootpw          {SSHA}KT2sBUCwRfLNE6cEMfAVR3TRXxs/SDhQ

Make sure that /private/var/db/openldap/openldap-data/ exists, creating it if it does not.

Run slapd: sudo /usr/libexec/slapd

