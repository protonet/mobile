#!/bin/bash
#
# This is the PROTONET sudo iptables configuration file, I basically use it to generate the setting, it is then used
# to save it and call it from the /etc/network.interfaces file, loopback device, it is adapted from
# http://www.linuxhomenetworking.com/wiki/index.php/Quick_HOWTO_:_Ch14_:_Linux_Firewalls_Using_sudo iptables
# and changed to suit my needs.
# 
# WHAT'S THE PLAN:
# The most important thing you have to do is to ask yourself: what are the potential users, and what are they allowed to do.
# So here it is:
# * A trusted user (a user connecting securly with the internal private interface):
#   - is allowed to access the local network, of course including the node itself
#   - is allowed to access the network connected to the external interface (EXTIF)
#   - is allowed to access the internet
# * An anonymous unauthenticated user (a user connecting insecurely with the internal public interface who hasn't authenticated himself
# on the nodes web interface) 
#   - is allowed to access the node itself
#   - is not allowed to access the local network
#   - is not allowed to access the network connected to the external interface
#   - is not allowed to access the internet
#   - is automatically redirected to the nodes web interface on www request to any destination (pre-routing)



# The location of the sudo iptables and kernel module programs
#
IPT=/sbin/iptables

#Setting the EXTERNAL and INTERNAL interfaces for the network
EXTIF="eth0"
PUBIF="wlan1"
PRVIF="wlan0"
REDIRECTION_TARGET="10.43.0.1"
# all INTERNAL interfaces
ALLINTIFS=( $PUBIF $PRVIF )

echo "   External Interface:          $EXTIF"
echo "   Internal PUBLIC Interface:   $PUBIF"
echo "   Internal PRIVATE Interface:  $PRVIF"

echo "   Clearing any existing rules and setting default policy.."
  $IPT -P INPUT ACCEPT
  $IPT -F INPUT 
  $IPT -P OUTPUT ACCEPT
  $IPT -F OUTPUT
  $IPT -P FORWARD DROP
  $IPT -F FORWARD
  $IPT -F unknown_user
  $IPT -t nat -F

echo "   Creating our unknown_user chain (handles traffic from public interface)"
  $IPT -N unknown_user -t nat

echo "   manage traffic coming from the public interface.."
  # accept allow tcp:80, tcp:443, udp:67 (dhcp) and udp:53 (dns) and tcp:5000 (protonet-socket) requests
  $IPT -t nat -A PREROUTING -i $PUBIF -p tcp -m tcp --destination $REDIRECTION_TARGET --dport 80   -j ACCEPT
  $IPT -t nat -A PREROUTING -i $PUBIF -p tcp -m tcp --destination $REDIRECTION_TARGET --dport 443  -j ACCEPT
  $IPT -t nat -A PREROUTING -i $PUBIF -p udp -m udp --destination $REDIRECTION_TARGET --dport 67   -j ACCEPT
  $IPT -t nat -A PREROUTING -i $PUBIF -p udp -m udp --destination $REDIRECTION_TARGET --dport 53   -j ACCEPT
  $IPT -t nat -A PREROUTING -i $PUBIF -p tcp -m tcp --destination $REDIRECTION_TARGET --dport 5000 -j ACCEPT

echo "   send all public traffic to the unknown_user chain"
  $IPT -t nat -A PREROUTING -i $PUBIF -j unknown_user

echo "   and drop all forward pakets marked 99"
  $IPT -t filter -A FORWARD -i $PUBIF -m mark --mark 99 -j DROP


echo "   allow traffic from all stored (and authorized) mac addresses"
  awk 'BEGIN { FS="\t"; } { system("$IPT -t nat -A unknown_user -m mac --mac-source "$4" -j RETURN"); }' /var/lib/users

echo "   mark all traffic from the unknown_user chain as 99 (untrusted)"
  $IPT -t nat -A unknown_user -j MARK --set-mark 99
  
echo "   redirect all traffic to $REDIRECTION_TARGET"
  $IPT -t nat -A unknown_user -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination $REDIRECTION_TARGET

echo "   setup connection sharing.."
  # allowing established connections + outbound stuff, log the rest
  # for all internal interface... some refact might be needed as some point
  for iface in ${ALLINTIFS[@]}
  do
    echo "   ... setting rules for $iface ..."
    $IPT -A FORWARD -i $EXTIF -o $iface -m state --state ESTABLISHED,RELATED -j ACCEPT
    $IPT -A FORWARD -i $iface -o $EXTIF -j ACCEPT    
  done

echo "   Enabling SNAT (MASQUERADE) functionality on $EXTIF"
  $IPT -t nat -A POSTROUTING -o $EXTIF -j MASQUERADE